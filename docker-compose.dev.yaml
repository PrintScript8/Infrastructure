services:

  proxy:
    container_name: "reverse-proxy-infra"
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./conf.d:/etc/nginx/conf.d:ro
      # - ./certificates/validation:/usr/share/nginx/html/.well-known/pki-validation:ro
      - ./certificates/ssl:/etc/nginx/ssl
    depends_on:
      - ui
      - snippets
      - parser


  ui:
    container_name: "ui"
    image: ghcr.io/printscript8/ui-dev:latest
      #ports:
    #  - "3000:80"

  authorization:
    image: ghcr.io/printscript8/authorization-dev:latest
    container_name: authorization-service
    #ports:
    #  - "8084:8080"
    env_file:
      - .env

  redis:
    container_name: "event-bus"
    image: redis:6-alpine
    #ports:
    #  - "6379:6379"

  api:
    container_name: "asset-service"
    image: ghcr.io/austral-ingsis/snippet-asset-service:latest
    #ports:
    #  - "8080:8080"
    environment:
      AZURE_HOST: "http://azurite"
      NEW_RELIC_APP_NAME: "asset-service"
      NEW_RELIC_AGENT_ENABLED: false

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: "azurite"
    hostname: azurite
    restart: always
    #ports:
    #  - "10000:10000"
    #  - "10001:10001"
    #  - "10002:10002"
    volumes:
      - blob:/workspace

  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - SUBDOMAINS=snippet-searcher
      - TOKEN=${DUCKDNS_TOKEN}
    volumes:
      - ./duckdns:/config
    restart: unless-stopped

  parser:
    image: ghcr.io/printscript8/parser-dev:latest
    container_name: parser-service
    #ports:
    #  - "8081:8080"
    environment:
      GITHUB_ACTOR: ${GITHUB_ACTOR}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      REDIS_HOST: event-bus
      REDIS_PORT: 6379
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
    depends_on:
      - redis

  snippets:
    image: ghcr.io/printscript8/snippet-dev:latest
    container_name: snippet-service
    #ports:
     # - "8082:8080"
    environment:
      GITHUB_ACTOR: ${GITHUB_ACTOR}
      GITHUB_TOKEN: ${GITHUB_TOKEN}

      DB_USER: ${SNIPPETS_USER}
      DB_PASSWORD: ${SNIPPETS_PASSWORD}
      DB_NAME: ${SNIPPETS_NAME}
      DB_HOST: ${SNIPPETS_HOST}
      DB_PORT: ${SNIPPETS_PORT}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}

    depends_on:
      - snippets_db
      - redis

  snippets_db:
    image: postgres:14
    container_name: snippets_db
  #  ports:
  #    - "${SNIPPETS_PORT}:5432"
    environment:
      POSTGRES_USER: ${SNIPPETS_USER}
      POSTGRES_PASSWORD: ${SNIPPETS_PASSWORD}
      POSTGRES_DB: ${SNIPPETS_NAME}
    volumes:
      - pgdata_snippets:/var/lib/postgresql/data

  permissions:
    image: ghcr.io/printscript8/permissions-dev:latest
    container_name: permission-service
    #ports:
     # - "8083:8080"
    environment:
      GITHUB_ACTOR: ${GITHUB_ACTOR}
      GITHUB_TOKEN: ${GITHUB_TOKEN}

      DB_USER: ${PERMISSIONS_USER}
      DB_PASSWORD: ${PERMISSIONS_PASSWORD}
      DB_NAME: ${PERMISSIONS_NAME}
      DB_HOST: ${PERMISSIONS_HOST}
      DB_PORT: ${PERMISSIONS_PORT}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}

    depends_on:
      - permissions_db
      - authorization

  permissions_db:
    image: postgres:14
    container_name: permissions_db
  #  ports:
  #    - "${PERMISSIONS_PORT}:5432"
    environment:
      POSTGRES_USER: ${PERMISSIONS_USER}
      POSTGRES_PASSWORD: ${PERMISSIONS_PASSWORD}
      POSTGRES_DB: ${PERMISSIONS_NAME}
    volumes:
      - pgdata_permissions:/var/lib/postgresql/data

volumes:
  pgdata_snippets:
  pgdata_permissions:
  blob: